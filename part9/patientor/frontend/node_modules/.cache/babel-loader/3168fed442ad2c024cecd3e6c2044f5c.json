{"ast":null,"code":"var _jsxFileName = \"/Users/America/Documents/GitHub/fullstackopen-ekti-2020/part9/patientor/frontend/src/PatientPage/index.tsx\";\nimport React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useStateValue } from \"../state/state\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { apiBaseUrl } from \"../constants\";\nimport { Icon } from \"semantic-ui-react\";\nimport { setOnePatientInfo } from \"../state/reducer\";\n\nconst PatientPage = () => {\n  const id = useParams();\n  const [patient, setPatient] = useState();\n  const [, dispatch] = useStateValue();\n  const [{\n    diagnoses\n  }] = useStateValue();\n  console.log(diagnoses); // console.log(diagnoses[\"F43.2\"].name) \n\n  React.useEffect(() => {\n    const fetchPatient = async () => {\n      try {\n        const {\n          data: patient\n        } = await axios.get(`${apiBaseUrl}/patients/${id.id}`);\n        setPatient(patient);\n        dispatch(setOnePatientInfo(patient)); // {type: \"UPDATE_PATIENT\", payload: patient})\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    fetchPatient();\n  }, [dispatch, id.id]);\n  console.log(patient); //    I have still no idea how to use typescript\n\n  const showIcon = gender => {\n    if (gender === \"male\") {\n      return \"mars\";\n    } else if (gender === \"female\") {\n      return \"venus\";\n    } else {\n      return \"genderless\";\n    }\n  };\n\n  if (!patient) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 12\n    }\n  }, patient.name, \" \", /*#__PURE__*/React.createElement(Icon, {\n    className: showIcon(patient.gender),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 31\n    }\n  })), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 12\n    }\n  }, \"ssn: \", patient.ssn), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 12\n    }\n  }, \"occupation: \", patient.occupation)), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, \"entries\"), patient.entries.length > 0 ? patient.entries.map(each => /*#__PURE__*/React.createElement(\"div\", {\n    key: each.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 21\n    }\n  }, each.description), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 21\n    }\n  }, each.diagnosisCodes ? each.diagnosisCodes.map(each => /*#__PURE__*/React.createElement(\"li\", {\n    key: each,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 25\n    }\n  }, each, \", \", diagnoses[each].name)) : null))) : null));\n};\n\nexport default PatientPage;","map":{"version":3,"sources":["/Users/America/Documents/GitHub/fullstackopen-ekti-2020/part9/patientor/frontend/src/PatientPage/index.tsx"],"names":["React","useParams","useStateValue","useState","axios","apiBaseUrl","Icon","setOnePatientInfo","PatientPage","id","patient","setPatient","dispatch","diagnoses","console","log","useEffect","fetchPatient","data","get","e","showIcon","gender","name","ssn","occupation","entries","length","map","each","description","diagnosisCodes"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {useParams} from \"react-router-dom\";\nimport {useStateValue} from \"../state/state\";\nimport {useState} from \"react\";\nimport {Patient} from \"../types\";\nimport axios from \"axios\";\nimport {apiBaseUrl} from \"../constants\";\nimport {Icon} from \"semantic-ui-react\";\nimport {setOnePatientInfo} from \"../state/reducer\";\n\n\n\nconst PatientPage: React.FC=()=>{\n    const id=useParams<{id: string}>();\n    const [patient, setPatient]=useState<Patient|undefined>();\n    const [, dispatch] = useStateValue();\n    const [{diagnoses}] = useStateValue();\n    \nconsole.log(diagnoses)\n   \n    // console.log(diagnoses[\"F43.2\"].name) \n\n    React.useEffect(() => {\n        const fetchPatient = async()=>{\n            try{\n                const {data: patient} = await axios.get<Patient>(`${apiBaseUrl}/patients/${id.id}`)\n                setPatient(patient);\n                dispatch(setOnePatientInfo(patient))\n                    // {type: \"UPDATE_PATIENT\", payload: patient})\n            }catch(e){\n                console.log(e)\n            } \n        }\n       fetchPatient()\n    }, [dispatch, id.id])\n  \n    console.log(patient);\n  \n//    I have still no idea how to use typescript\n   const showIcon = (gender: string): \"mars\"| \"venus\"|\"genderless\"=>{\n    if (gender===\"male\"){\n        return \"mars\"\n    }\n    else if(gender=== \"female\"){\n        return \"venus\"\n    }else{\n        return \"genderless\"\n    }\n    }\n    \n    if(!patient){\n        return null\n    }\n    return(\n        <>\n        <div>\n           <h2>{patient.name} <Icon className={showIcon(patient.gender)}/></h2>\n           <p>ssn: {patient.ssn}</p>\n           <p>occupation: {patient.occupation}</p>\n        </div>\n        <div>\n            <h2>entries</h2>\n            {\n                patient.entries.length>0? \n                patient.entries.map(each=>(\n                    <div key={each.id}>\n                    <p>{each.description}</p>\n                    <ul> \n                        {\n                        each.diagnosisCodes? each.diagnosisCodes.map(each=>(\n                        <li key={each}>{each}, {diagnoses[each].name}\n                        </li>)) : null\n                        }\n                    </ul>\n                    </div>\n                )): null\n            }\n        </div>\n        </>\n    )\n}\nexport default PatientPage"]},"metadata":{},"sourceType":"module"}