{"ast":null,"code":"var _jsxFileName = \"/Users/America/Documents/GitHub/fullstackopen-ekti-2020/part9/patientor/frontend/src/components/EntryDetails.tsx\";\nimport React from \"react\";\nimport HealthCheckDisplay from \"./HealthCheckDisplay\";\nimport HospitalDisplay from \"./HospitalDisplay\";\nimport OccupationalHealthcareDisplay from \"./OccupationalHealthcareDisplay\";\n\nconst EntryDetails = ({\n  entry\n}) => {\n  const assertNever = value => {\n    throw new Error(`Unhandled discriminated union member: ${JSON.stringify(value)}`);\n  };\n\n  const showIconType = type => {\n    if (type === \"OccupationalHealthcare\") {\n      return \"stethoscope\";\n    } else if (type === \"Hospital\") {\n      return \"hospital\";\n    } else {\n      return \"user md\";\n    }\n  };\n\n  switch (entry.type) {\n    case \"HealthCheck\":\n      return /*#__PURE__*/React.createElement(HealthCheckDisplay, {\n        iconType: showIconType(entry.type),\n        entry: entry,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 7\n        }\n      });\n\n    case \"Hospital\":\n      return /*#__PURE__*/React.createElement(HospitalDisplay, {\n        iconType: showIconType(entry.type),\n        entry: entry,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 7\n        }\n      });\n\n    case \"OccupationalHealthcare\":\n      return /*#__PURE__*/React.createElement(OccupationalHealthcareDisplay, {\n        iconType: showIconType(entry.type),\n        entry: entry,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 7\n        }\n      });\n\n    default:\n      return assertNever(entry);\n  }\n};\n\nexport default EntryDetails;","map":{"version":3,"sources":["/Users/America/Documents/GitHub/fullstackopen-ekti-2020/part9/patientor/frontend/src/components/EntryDetails.tsx"],"names":["React","HealthCheckDisplay","HospitalDisplay","OccupationalHealthcareDisplay","EntryDetails","entry","assertNever","value","Error","JSON","stringify","showIconType","type"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,6BAAP,MAA0C,iCAA1C;;AAEA,MAAMC,YAAsC,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAW;AACxD,QAAMC,WAAW,GAAIC,KAAD,IAAyB;AAC3C,UAAM,IAAIC,KAAJ,CACH,yCAAwCC,IAAI,CAACC,SAAL,CAAeH,KAAf,CAAsB,EAD3D,CAAN;AAGD,GAJD;;AAMA,QAAMI,YAAY,GAAEC,IAAD,IAAoD;AACrE,QAAGA,IAAI,KAAK,wBAAZ,EAAqC;AACnC,aAAO,aAAP;AACD,KAFD,MAGK,IAAGA,IAAI,KAAI,UAAX,EAAsB;AACzB,aAAO,UAAP;AACD,KAFI,MAGD;AACF,aAAO,SAAP;AACD;AAEF,GAXD;;AAYF,UAAQP,KAAK,CAACO,IAAd;AACE,SAAK,aAAL;AACE,0BACE,oBAAC,kBAAD;AAAoB,QAAA,QAAQ,EAAED,YAAY,CAACN,KAAK,CAACO,IAAP,CAA1C;AAAwD,QAAA,KAAK,EAAEP,KAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;;AAGF,SAAK,UAAL;AACE,0BACE,oBAAC,eAAD;AAAiB,QAAA,QAAQ,EAAEM,YAAY,CAACN,KAAK,CAACO,IAAP,CAAvC;AAAoD,QAAA,KAAK,EAAEP,KAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;;AAGF,SAAK,wBAAL;AACE,0BACE,oBAAC,6BAAD;AAA+B,QAAA,QAAQ,EAAEM,YAAY,CAACN,KAAK,CAACO,IAAP,CAArD;AAAmE,QAAA,KAAK,EAAEP,KAA1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;;AAGF;AACE,aAAOC,WAAW,CAACD,KAAD,CAAlB;AAdJ;AAiBC,CApCD;;AAqCA,eAAeD,YAAf","sourcesContent":["import React from \"react\";\nimport { Entry } from \"../types\";\nimport HealthCheckDisplay from \"./HealthCheckDisplay\";\nimport HospitalDisplay from \"./HospitalDisplay\";\nimport OccupationalHealthcareDisplay from \"./OccupationalHealthcareDisplay\";\n\nconst EntryDetails: React.FC<{entry: Entry}> = ({entry})=>{\n  const assertNever = (value: never): never => {\n    throw new Error(\n      `Unhandled discriminated union member: ${JSON.stringify(value)}`\n    );\n  };\n\n  const showIconType=(type: string): \"user md\"|\"stethoscope\"|\"hospital\"=>{\n    if(type === \"OccupationalHealthcare\"){\n      return \"stethoscope\"\n    }\n    else if(type=== \"Hospital\"){\n      return \"hospital\"\n    }\n    else{\n      return \"user md\"\n    }\n    \n  }\nswitch (entry.type) {\n  case \"HealthCheck\":\n    return (\n      <HealthCheckDisplay iconType={showIconType(entry.type)} entry={entry}/>\n    );\n  case \"Hospital\":\n    return(\n      <HospitalDisplay iconType={showIconType(entry.type)}entry={entry}/>\n    );\n  case \"OccupationalHealthcare\":\n    return(\n      <OccupationalHealthcareDisplay iconType={showIconType(entry.type)} entry={entry}/>\n    )\n  default:\n    return assertNever(entry)\n}\n\n}\nexport default EntryDetails;\n\n"]},"metadata":{},"sourceType":"module"}