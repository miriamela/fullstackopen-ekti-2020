{"ast":null,"code":"var _jsxFileName = \"/Users/America/Documents/GitHub/fullstackopen-ekti-2020/part9/patientor/frontend/src/PatientPage/index.tsx\";\nimport React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useStateValue } from \"../state/state\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { apiBaseUrl } from \"../constants\";\nimport { Icon } from \"semantic-ui-react\";\nimport { setOnePatientInfo } from \"../state/reducer\";\n\nconst PatientPage = () => {\n  const id = useParams();\n  const [patient, setPatient] = useState();\n  const [, dispatch] = useStateValue();\n  useEffect(() => {\n    const fetchPatient = async () => {\n      try {\n        const {\n          data: patient\n        } = await axios.get(`${apiBaseUrl}/patients/${id.id}`);\n        setPatient(patient);\n        dispatch(setOnePatientInfo(patient)); // {type: \"UPDATE_PATIENT\", payload: patient})\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    fetchPatient();\n  }, [dispatch, id.id]);\n  console.log(patient);\n\n  if (!patient) {\n    return null;\n  } //    I have still no idea how to use typescript\n\n\n  const showIcon = gender => {\n    if (gender === \"male\") {\n      return \"mars\";\n    } else if (gender === \"female\") {\n      return \"venus\";\n    } else {\n      return \"genderless\";\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 12\n    }\n  }, patient.name, \" \", /*#__PURE__*/React.createElement(Icon, {\n    className: showIcon(patient.gender),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 31\n    }\n  })), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 12\n    }\n  }, \"ssn: \", patient.ssn), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 12\n    }\n  }, \"occupation: \", patient.occupation)), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }, \"entries\"), patient.entries.map(each => {\n    var _each$diagnosisCodes;\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: each.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }\n    }, each.description), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }\n    }, (_each$diagnosisCodes = each.diagnosisCodes) === null || _each$diagnosisCodes === void 0 ? void 0 : _each$diagnosisCodes.map(each => /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 29\n      }\n    }, each))));\n  })));\n};\n\nexport default PatientPage;","map":{"version":3,"sources":["/Users/America/Documents/GitHub/fullstackopen-ekti-2020/part9/patientor/frontend/src/PatientPage/index.tsx"],"names":["React","useParams","useStateValue","useEffect","useState","axios","apiBaseUrl","Icon","setOnePatientInfo","PatientPage","id","patient","setPatient","dispatch","fetchPatient","data","get","e","console","log","showIcon","gender","name","ssn","occupation","entries","map","each","description","diagnosisCodes"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {useParams} from \"react-router-dom\";\nimport {useStateValue} from \"../state/state\";\nimport {useEffect, useState} from \"react\";\nimport {Patient} from \"../types\";\nimport axios from \"axios\";\nimport {apiBaseUrl} from \"../constants\";\nimport {Icon} from \"semantic-ui-react\";\nimport {setOnePatientInfo} from \"../state/reducer\";\n\nconst PatientPage: React.FC=()=>{\n    const id=useParams<{id: string}>();\n    const [patient, setPatient]=useState<Patient|undefined>();\n    const [, dispatch] = useStateValue();\n\n    useEffect(() => {\n        const fetchPatient = async()=>{\n            try{\n                const {data: patient} = await axios.get<Patient>(`${apiBaseUrl}/patients/${id.id}`)\n                setPatient(patient);\n                dispatch(setOnePatientInfo(patient))\n                    // {type: \"UPDATE_PATIENT\", payload: patient})\n            }catch(e){\n                console.log(e)\n            } \n        }\n       fetchPatient()\n    }, [dispatch, id.id])\nconsole.log(patient);\n   if(!patient){\n       return null\n   }\n//    I have still no idea how to use typescript\n   const showIcon = (gender: string): \"mars\"| \"venus\"|\"genderless\"=>{\n    if (gender===\"male\"){\n        return \"mars\"\n    }\n    else if(gender=== \"female\"){\n        return \"venus\"\n    }else{\n        return \"genderless\"\n    }\n    }\n\n    return(\n        <>\n        <div>\n           <h2>{patient.name} <Icon className={showIcon(patient.gender)}/></h2>\n           <p>ssn: {patient.ssn}</p>\n           <p>occupation: {patient.occupation}</p>\n        </div>\n        <div>\n            <h2>entries</h2>\n            {\n                patient.entries.map(each=>(\n                    <div key={each.id}>\n                    <p>{each.description}</p>\n                    <ul>\n                        {each.diagnosisCodes?.map(each=>(\n                            <li>{each}</li>\n                        ))}\n                    </ul>\n                    </div>\n                ))\n            }\n        </div>\n        </>\n    )\n}\nexport default PatientPage"]},"metadata":{},"sourceType":"module"}