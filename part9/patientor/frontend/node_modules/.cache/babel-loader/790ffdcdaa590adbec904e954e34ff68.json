{"ast":null,"code":"var _jsxFileName = \"/Users/America/Documents/GitHub/fullstackopen-ekti-2020/part9/patientor/frontend/src/AddHealthCheckModal/AddHealthCheckForm.tsx\";\nimport React from \"react\";\nimport { Field, Formik, Form } from \"formik\";\nimport { Grid, Button } from \"semantic-ui-react\";\nimport { TextField, NumberField, DiagnosisSelection } from \"../AddPatientModal/FormField\";\nimport { useStateValue } from \"../state\";\n\nconst AddHealthCheckForm = ({\n  onSubmit,\n  closeModal\n}) => {\n  const [{\n    diagnoses\n  }] = useStateValue();\n  return /*#__PURE__*/React.createElement(Formik, {\n    initialValues: {\n      description: \"\",\n      date: \"\",\n      specialist: \"\",\n      diagnosisCodes: [],\n      type: \"HealthCheck\",\n      healthCheckRating: 0\n    },\n    onSubmit: onSubmit,\n    validate: values => {\n      const requiredError = \"Field is required\";\n      const errors = {};\n\n      if (!values.description) {\n        errors.name = requiredError;\n      }\n\n      if (!values.date) {\n        errors.description = requiredError;\n      }\n\n      if (!values.specialist) {\n        errors.specialist = requiredError;\n      }\n\n      return errors;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 9\n    }\n  }, ({\n    isValid,\n    dirty,\n    setFieldValue,\n    setFieldTouched\n  }) => {\n    return /*#__PURE__*/React.createElement(Form, {\n      className: \"form ui\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Field, {\n      label: \"specialist\",\n      placeholder: \"SPECIALIST\",\n      name: \"specialist\",\n      component: TextField,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 30\n      }\n    }), /*#__PURE__*/React.createElement(Field, {\n      label: \"date\",\n      placeholder: \"YYYY-MM-DD\",\n      name: \"date\",\n      component: TextField,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(Field, {\n      label: \"description\",\n      placeholder: \"DESCRIPTION\",\n      name: \"description\",\n      component: TextField,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(Field, {\n      label: \"health Check erlinRating\",\n      name: \"healthCheckRating\",\n      component: NumberField,\n      min: 0,\n      max: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 30\n      }\n    }), /*#__PURE__*/React.createElement(DiagnosisSelection, {\n      setFieldValue: setFieldValue,\n      setFieldTouched: setFieldTouched,\n      diagnoses: Object.values(diagnoses),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Column, {\n      floated: \"left\",\n      width: 5,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"button\",\n      onClick: closeModal,\n      color: \"red\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 37\n      }\n    }, \"Cancel\")), /*#__PURE__*/React.createElement(Grid.Column, {\n      floated: \"right\",\n      width: 5,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      floated: \"right\",\n      color: \"green\",\n      disabled: !dirty || !isValid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 37\n      }\n    }, \"Add\"))));\n  });\n};\n\nexport default AddHealthCheckForm;","map":{"version":3,"sources":["/Users/America/Documents/GitHub/fullstackopen-ekti-2020/part9/patientor/frontend/src/AddHealthCheckModal/AddHealthCheckForm.tsx"],"names":["React","Field","Formik","Form","Grid","Button","TextField","NumberField","DiagnosisSelection","useStateValue","AddHealthCheckForm","onSubmit","closeModal","diagnoses","description","date","specialist","diagnosisCodes","type","healthCheckRating","values","requiredError","errors","name","isValid","dirty","setFieldValue","setFieldTouched","Object"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {HealthCheckFormEntries} from \"./index\";\nimport {Field, Formik, Form} from \"formik\";\nimport {Grid, Button} from \"semantic-ui-react\";\nimport {TextField, NumberField, DiagnosisSelection} from \"../AddPatientModal/FormField\";\nimport { useStateValue } from \"../state\";\n\ninterface Props{\n    onSubmit: (values:HealthCheckFormEntries)=>void;\n    closeModal: ()=>void;\n}\n\nconst AddHealthCheckForm:React.FC<Props>=({onSubmit, closeModal})=>{\n    const [{diagnoses}] =useStateValue()\n    return(\n        <Formik initialValues={{\n            description: \"\",\n            date: \"\",\n            specialist: \"\",\n            diagnosisCodes: [],\n            type: \"HealthCheck\",\n            healthCheckRating: 0\n        }} \n        onSubmit={onSubmit}\n        validate={\n            values=>{\n                const requiredError= \"Field is required\";\n                const errors: {[field: string]: string}={}\n                if(!values.description){\n                    errors.name=requiredError;\n                }\n                if(!values.date){\n                    errors.description =requiredError;\n                }\n                if(!values.specialist){\n                    errors.specialist =requiredError;\n                }\n                return errors;\n            }}>\n            {\n                ({isValid, dirty, setFieldValue, setFieldTouched})=>{\n                    return(\n                        <Form className=\"form ui\">\n                             <Field\n                            label=\"specialist\"\n                            placeholder=\"SPECIALIST\"\n                            name=\"specialist\"\n                            component={TextField}\n                            />\n                            <Field\n                            label=\"date\"\n                            placeholder=\"YYYY-MM-DD\"\n                            name=\"date\"\n                            component={TextField}\n                            />\n                            <Field\n                            label=\"description\"\n                            placeholder= \"DESCRIPTION\"\n                            name=\"description\"\n                            component={TextField}\n                            />\n                             <Field\n                            label=\"health Check erlinRating\"\n                            name=\"healthCheckRating\"\n                            component={NumberField}\n                            min={0}\n                            max={3}\n                            />\n                            <DiagnosisSelection\n                            setFieldValue={setFieldValue}\n                            setFieldTouched={setFieldTouched}\n                            diagnoses={Object.values(diagnoses)}\n                            />\n                            <Grid>\n                                <Grid.Column floated=\"left\" width={5}>\n                                    <Button type=\"button\" onClick={closeModal} color=\"red\">Cancel</Button>\n                                </Grid.Column>\n                                <Grid.Column floated=\"right\" width={5}>\n                                    <Button type=\"submit\" floated=\"right\" color=\"green\" disabled={!dirty|| !isValid}>\n                                        Add\n                                    </Button>\n                                </Grid.Column>\n                            </Grid>\n                        </Form>\n                        \n                    )\n                }\n            }\n        </Formik>\n    )\n}\nexport default AddHealthCheckForm\n"]},"metadata":{},"sourceType":"module"}